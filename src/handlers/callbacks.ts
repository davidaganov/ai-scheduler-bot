import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../services/database";
import { createMultipleTasks } from "../handlers";
import { sessionService } from "../services";
import {
  formatTaskList,
  createTaskListHeader,
  formatTask,
  createTaskActionsKeyboard,
  createConfirmationKeyboard,
  createProjectManagementKeyboard,
  createProjectActionsKeyboard,
  createProjectConfirmationKeyboard,
  createStatusButtonsKeyboard,
  getKeyboardByScreenState,
} from "../utils";
import {
  TASK_STATUS,
  TASK_STATUS_EMOJI,
  TASK_STATUS_TITLE,
  SCREEN_STATE,
} from "../types";

/**
 * Safe callback query answer to prevent errors
 * @param ctx - Telegraf context
 * @param text - Optional text to show
 */
async function safeAnswerCbQuery(ctx: Context, text?: string): Promise<void> {
  try {
    await ctx.answerCbQuery(text);
  } catch (error: any) {
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:", error.message);
    // Ignore callback query errors, they are not critical
  }
}

/**
 * Sets up callback handlers for the bot
 * @param bot - Telegraf bot instance
 */
export function setupCallbackHandlers(bot: Telegraf<Context<Update>>) {
  /**
   * Show status filter
   */
  bot.action("show_status_filter", async (ctx) => {
    try {
      const tasks = dbService.getAllTasks();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const notStarted = tasks.filter(
        (task) => task.status === TASK_STATUS.NOT_STARTED
      ).length;
      const inProgress = tasks.filter(
        (task) => task.status === TASK_STATUS.IN_PROGRESS
      ).length;
      const done = tasks.filter(
        (task) => task.status === TASK_STATUS.DONE
      ).length;

      const text =
        `üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã\n\n` +
        `${TASK_STATUS_EMOJI.NOT_STARTED} –ù–µ –Ω–∞—á–∞—Ç–æ: ${notStarted}\n` +
        `${TASK_STATUS_EMOJI.IN_PROGRESS} –í —Ä–∞–±–æ—Ç–µ: ${inProgress}\n` +
        `${TASK_STATUS_EMOJI.DONE} –°–¥–µ–ª–∞–Ω–æ: ${done}\n\n` +
        `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`;

      await ctx.editMessageText(text, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState(tasks, SCREEN_STATE.STATUS_SELECTION),
      });

      await safeAnswerCbQuery(ctx, "–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:", error);
      await safeAnswerCbQuery(ctx, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    }
  });

  /**
   * Show project filter
   */
  bot.action("show_project_filter", async (ctx) => {
    const projects = dbService.getProjects();

    if (projects.length === 0) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤");
      return;
    }

    try {
      await ctx.editMessageReplyMarkup(
        getKeyboardByScreenState([], SCREEN_STATE.PROJECT_SELECTION, {
          projects,
        }).reply_markup
      );
      await safeAnswerCbQuery(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
      await safeAnswerCbQuery(ctx, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    }
  });

  /**
   * Filter by status
   */
  bot.action(/^filter_status:(.+)$/, async (ctx) => {
    const status: TASK_STATUS = ctx.match[1] as TASK_STATUS;

    try {
      let tasks;
      let header;
      let showCompleted = false;

      if (status === TASK_STATUS.ALL) {
        tasks = dbService.getAllTasks();
        header = createTaskListHeader();
        showCompleted = false; // Still hide completed in general list
      } else if (status === TASK_STATUS.DONE) {
        tasks = dbService.getTasksByFilter({ status });
        header = createTaskListHeader({ status });
        showCompleted = true; // Show only completed
      } else {
        tasks = dbService.getTasksByFilter({ status });
        header = createTaskListHeader({ status });
        showCompleted = false;
      }

      const newText = header + "\n\n" + formatTaskList(tasks, showCompleted);

      // Check if new text differs from current
      const currentMessage = ctx.callbackQuery?.message;
      if (currentMessage && "text" in currentMessage) {
        const currentText = currentMessage.text;

        // If it's the same filter, reset it (show active tasks)
        if (currentText === newText && status !== "all") {
          const allTasks = dbService.getAllTasks();
          const allTasksText =
            createTaskListHeader() + "\n\n" + formatTaskList(allTasks, false);

          await ctx.editMessageText(allTasksText, {
            parse_mode: "HTML",
            ...getKeyboardByScreenState(allTasks, SCREEN_STATE.MAIN_LIST),
          });
          await safeAnswerCbQuery(ctx, "–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω");
          return;
        }

        // If text hasn't changed
        if (currentText === newText) {
          await safeAnswerCbQuery(ctx, "–§–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω");
          return;
        }
      }

      const filteredTasksForKeyboard = showCompleted
        ? tasks
        : tasks.filter((task) => task.status !== TASK_STATUS.DONE);

      await ctx.editMessageText(newText, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState(
          filteredTasksForKeyboard,
          SCREEN_STATE.FILTERED_BY_STATUS
        ),
      });

      await safeAnswerCbQuery(
        ctx,
        `–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞–¥–∞—á–∏: ${
          status === TASK_STATUS.ALL
            ? "–∞–∫—Ç–∏–≤–Ω—ã–µ"
            : status === TASK_STATUS.DONE
            ? "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
            : status
        }`
      );
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
    }
  });

  /**
   * Filter by project
   */
  bot.action(/^filter_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      let tasks;
      let header;

      if (project === "all") {
        tasks = dbService.getAllTasks();
        header = createTaskListHeader();
      } else {
        tasks = dbService.getTasksByFilter({ project });
        header = createTaskListHeader({ project });
      }

      const newText = header + "\n\n" + formatTaskList(tasks, false); // Always hide completed

      // Check if new text differs from current
      const currentMessage = ctx.callbackQuery?.message;
      if (currentMessage && "text" in currentMessage) {
        const currentText = currentMessage.text;

        // If it's the same filter, reset it (show active tasks)
        if (currentText === newText && project !== "all") {
          const allTasks = dbService.getAllTasks();
          const allTasksText =
            createTaskListHeader() + "\n\n" + formatTaskList(allTasks, false);

          await ctx.editMessageText(allTasksText, {
            parse_mode: "HTML",
            ...getKeyboardByScreenState(allTasks, SCREEN_STATE.MAIN_LIST),
          });
          await safeAnswerCbQuery(ctx, "–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω");
          return;
        }

        // If text hasn't changed
        if (currentText === newText) {
          await safeAnswerCbQuery(ctx, "–§–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω");
          return;
        }
      }

      const filteredTasksForKeyboard = tasks.filter(
        (task) => task.status !== TASK_STATUS.DONE
      );

      await ctx.editMessageText(newText, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState(
          filteredTasksForKeyboard,
          SCREEN_STATE.FILTERED_BY_PROJECT
        ),
      });

      await safeAnswerCbQuery(
        ctx,
        `–ü–æ–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${project === "all" ? "–≤—Å–µ" : project}`
      );
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
    }
  });

  /**
   * Start task (change status to "in_progress")
   */
  bot.action(/^start_task:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    const task = dbService.getTaskById(taskId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    if (task.status === TASK_STATUS.IN_PROGRESS) {
      await safeAnswerCbQuery(ctx, "–ó–∞–¥–∞—á–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ");
      return;
    }

    try {
      if (dbService.updateTaskStatus(taskId, TASK_STATUS.IN_PROGRESS)) {
        task.status = TASK_STATUS.IN_PROGRESS;
        await ctx.editMessageText(formatTask(task), {
          parse_mode: "HTML",
          link_preview_options: { is_disabled: true },
          ...createTaskActionsKeyboard(taskId, task.status),
        });

        await safeAnswerCbQuery(
          ctx,
          `üöß –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ '${TASK_STATUS_TITLE.IN_PROGRESS}'`
        );
      } else {
        await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Complete task (change status to "done")
   */
  bot.action(/^done_task:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    const task = dbService.getTaskById(taskId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    if (task.status === TASK_STATUS.DONE) {
      await safeAnswerCbQuery(ctx, "–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      return;
    }

    try {
      if (dbService.updateTaskStatus(taskId, TASK_STATUS.DONE)) {
        task.status = TASK_STATUS.DONE;
        await ctx.editMessageText(formatTask(task), {
          parse_mode: "HTML",
          link_preview_options: { is_disabled: true },
          ...createTaskActionsKeyboard(taskId, task.status),
        });

        await safeAnswerCbQuery(
          ctx,
          `‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ '${TASK_STATUS_TITLE.DONE}'`
        );
      } else {
        await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Request task deletion
   */
  bot.action(/^delete_task:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    const task = dbService.getTaskById(taskId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    try {
      await ctx.editMessageText(
        `üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}?\n\n${task.description}`,
        { parse_mode: "HTML", ...createConfirmationKeyboard("delete", taskId) }
      );

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    }
  });

  /**
   * Confirm task deletion
   */
  bot.action(/^confirm_delete:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);

    try {
      if (dbService.deleteTask(taskId)) {
        await ctx.editMessageText(`‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);
        await safeAnswerCbQuery(ctx, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞");
      } else {
        await ctx.editMessageText(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}.`);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Cancel task deletion
   */
  bot.action(/^cancel_delete:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    const task = dbService.getTaskById(taskId);

    if (!task) {
      try {
        await ctx.editMessageText(`‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        await safeAnswerCbQuery(ctx);
      } catch (error: any) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞");
      }
      return;
    }

    try {
      await ctx.editMessageText(formatTask(task), {
        parse_mode: "HTML",
        link_preview_options: { is_disabled: true },
        ...createTaskActionsKeyboard(taskId, task.status),
      });

      await safeAnswerCbQuery(ctx, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ");
    }
  });

  /**
   * Select existing project
   */
  bot.action(/^select_project:(.+)$/, async (ctx) => {
    if (!ctx.chat) return;

    const project = ctx.match[1];
    const chatId = ctx.chat.id;

    // Check if there are analyzed tasks (new system)
    const analyzedTasks = sessionService.getAnalyzedTasks(chatId);
    if (analyzedTasks && analyzedTasks.length > 0) {
      try {
        // Create all tasks with selected project
        await createMultipleTasks(ctx, analyzedTasks, project, bot);

        // Delete project selection message
        try {
          await ctx.deleteMessage();
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞");
        }

        await safeAnswerCbQuery(
          ctx,
          `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${analyzedTasks.length} –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project}"`
        );
      } catch (error: any) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á:", error.message);
        sessionService.clearUserData(chatId);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á");
      }
      return;
    }

    // Fallback: if old system is used (shouldn't happen, but just in case)
    await safeAnswerCbQuery(ctx, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã");
    await ctx.editMessageText(
      "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ."
    );
  });

  /**
   * Create new project
   */
  bot.action("create_new_project", async (ctx) => {
    if (!ctx.chat) return;

    const chatId = ctx.chat.id;

    // Check if there are analyzed tasks (new system)
    const analyzedTasks = sessionService.getAnalyzedTasks(chatId);
    if (analyzedTasks && analyzedTasks.length > 0) {
      try {
        // Set state to wait for project name
        sessionService.setUserState(chatId, "waiting_for_project_name");

        const tasksText = analyzedTasks
          .map((task, index) => `${index + 1}. ${task}`)
          .join("\n\n");

        await ctx.editMessageText(
          `üìù –ó–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:\n\n${tasksText}\n\nüÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:`
        );

        await safeAnswerCbQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
      } catch (error: any) {
        console.log(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á:",
          error.message
        );
        sessionService.clearUserData(chatId);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
      }
      return;
    }

    await safeAnswerCbQuery(ctx, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã");
    await ctx.editMessageText(
      "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ."
    );
  });

  /**
   * Task information (handler for task buttons)
   */
  bot.action(/^task_info:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    const task = dbService.getTaskById(taskId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    try {
      // Send task details in new message
      await ctx.reply(formatTask(task), {
        parse_mode: "HTML",
        link_preview_options: { is_disabled: true },
        ...getKeyboardByScreenState([], SCREEN_STATE.TASK_DETAILS, {
          taskId: task.id,
          status: task.status,
        }),
      });

      await safeAnswerCbQuery(ctx, `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ #${taskId}`);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
    }
  });

  /**
   * Manage project
   */
  bot.action(/^manage_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];
    const stats = dbService.getProjectStats(project);

    try {
      const projectInfo =
        `üìÅ –ü—Ä–æ–µ–∫—Ç: <b>${project}</b>\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.NOT_STARTED} ${TASK_STATUS_TITLE.NOT_STARTED}: ${stats.notStarted}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.IN_PROGRESS} ${TASK_STATUS_TITLE.IN_PROGRESS}: ${stats.inProgress}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.DONE} ${TASK_STATUS_TITLE.DONE}: ${stats.done}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(projectInfo, {
        parse_mode: "HTML",
        ...createProjectActionsKeyboard(project),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–º:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Add new project
   */
  bot.action("add_new_project", async (ctx) => {
    if (!ctx.chat) return;

    const chatId = ctx.chat.id;

    try {
      // Set state to wait for project name
      sessionService.setUserState(chatId, "waiting_for_project_name");

      await ctx.editMessageText(
        "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"
      );

      await safeAnswerCbQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Clear project
   */
  bot.action(/^clear_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      const confirmMessage =
        `üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"\n\n` +
        `‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ!\n` +
        `–ü—Ä–æ–µ–∫—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –Ω–æ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã?`;

      await ctx.editMessageText(confirmMessage, {
        parse_mode: "HTML",
        ...createProjectConfirmationKeyboard("clear", project),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Delete project
   */
  bot.action(/^delete_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      const confirmMessage =
        `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"\n\n` +
        `‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –ø—Ä–æ–µ–∫—Ç –∏ –í–°–ï –µ–≥–æ –∑–∞–¥–∞—á–∏!\n` +
        `–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã?`;

      await ctx.editMessageText(confirmMessage, {
        parse_mode: "HTML",
        ...createProjectConfirmationKeyboard("delete", project),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Confirm project clearing
   */
  bot.action(/^confirm_project_clear:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      const clearedCount = dbService.clearProject(project);

      await ctx.editMessageText(
        `‚úÖ –ü—Ä–æ–µ–∫—Ç "${project}" –æ—á–∏—â–µ–Ω.\n` + `–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${clearedCount}`
      );

      await safeAnswerCbQuery(ctx, "–ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞");
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
    }
  });

  /**
   * Confirm project deletion
   */
  bot.action(/^confirm_project_delete:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      const success = dbService.deleteProject(project);

      if (success) {
        await ctx.editMessageText(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${project}" —É–¥–∞–ª–µ–Ω.`);
        await safeAnswerCbQuery(ctx, "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω");
      } else {
        await ctx.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${project}"`);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞");
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Cancel project clearing
   */
  bot.action(/^cancel_project_clear:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      const stats = dbService.getProjectStats(project);
      const projectInfo =
        `üìÅ –ü—Ä–æ–µ–∫—Ç: <b>${project}</b>\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.NOT_STARTED} ${TASK_STATUS_TITLE.NOT_STARTED}: ${stats.notStarted}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.IN_PROGRESS} ${TASK_STATUS_TITLE.IN_PROGRESS}: ${stats.inProgress}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.DONE} ${TASK_STATUS_TITLE.DONE}: ${stats.done}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(projectInfo, {
        parse_mode: "HTML",
        ...createProjectActionsKeyboard(project),
      });

      await safeAnswerCbQuery(ctx, "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—á–∏—Å—Ç–∫–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞");
    }
  });

  /**
   * Cancel project deletion
   */
  bot.action(/^cancel_project_delete:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      const stats = dbService.getProjectStats(project);
      const projectInfo =
        `üìÅ –ü—Ä–æ–µ–∫—Ç: <b>${project}</b>\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.NOT_STARTED} ${TASK_STATUS_TITLE.NOT_STARTED}: ${stats.notStarted}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.IN_PROGRESS} ${TASK_STATUS_TITLE.IN_PROGRESS}: ${stats.inProgress}\n` +
        `   ‚Ä¢ ${TASK_STATUS_EMOJI.DONE} ${TASK_STATUS_TITLE.DONE}: ${stats.done}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(projectInfo, {
        parse_mode: "HTML",
        ...createProjectActionsKeyboard(project),
      });

      await safeAnswerCbQuery(ctx, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞");
    }
  });

  /**
   * Back to projects list
   */
  bot.action("back_to_projects", async (ctx) => {
    try {
      const projects = dbService.getProjects();

      if (projects.length === 0) {
        await ctx.editMessageText(
          "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:",
          getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          })
        );
      } else {
        let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";

        projects.forEach((project) => {
          const stats = dbService.getProjectStats(project);
          projectsInfo += `üìÇ <b>${project}</b>\n`;
          projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
        });

        await ctx.editMessageText(projectsInfo, {
          parse_mode: "HTML",
          ...getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          }),
        });
      }

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Fixed callback for project selection when creating tasks
   */
  bot.action(/^select_project_for_tasks:(.+)$/, async (ctx) => {
    if (!ctx.chat) return;

    const project = ctx.match[1];
    const chatId = ctx.chat.id;

    // Check if there are analyzed tasks
    const analyzedTasks = sessionService.getAnalyzedTasks(chatId);
    if (analyzedTasks && analyzedTasks.length > 0) {
      try {
        // Create all tasks with selected project
        await createMultipleTasks(ctx, analyzedTasks, project, bot);

        // Delete project selection message
        try {
          await ctx.deleteMessage();
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞");
        }

        await safeAnswerCbQuery(
          ctx,
          `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${analyzedTasks.length} –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project}"`
        );
      } catch (error: any) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á:", error.message);
        sessionService.clearUserData(chatId);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á");
      }
      return;
    }

    await safeAnswerCbQuery(ctx, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã");
    await ctx.editMessageText(
      "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ."
    );
  });

  /**
   * Create new project for tasks
   */
  bot.action("create_new_project_for_tasks", async (ctx) => {
    if (!ctx.chat) return;

    const chatId = ctx.chat.id;

    // Check if there are analyzed tasks
    const analyzedTasks = sessionService.getAnalyzedTasks(chatId);
    if (analyzedTasks && analyzedTasks.length > 0) {
      try {
        // Set state to wait for project name
        sessionService.setUserState(chatId, "waiting_for_project_name");

        const tasksText = analyzedTasks
          .map((task, index) => `${index + 1}. ${task}`)
          .join("\n\n");

        await ctx.editMessageText(
          `üìù –ó–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:\n\n${tasksText}\n\nüÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:`
        );

        await safeAnswerCbQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
      } catch (error: any) {
        console.log(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á:",
          error.message
        );
        sessionService.clearUserData(chatId);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
      }
      return;
    }

    await safeAnswerCbQuery(ctx, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã");
    await ctx.editMessageText(
      "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ."
    );
  });

  /**
   * Cancel task creation
   */
  bot.action("cancel_tasks_creation", async (ctx) => {
    if (!ctx.chat) return;

    const chatId = ctx.chat.id;

    try {
      sessionService.clearUserData(chatId);

      await ctx.editMessageText("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç–º–µ–Ω–µ–Ω–æ.");
      await safeAnswerCbQuery(ctx, "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ");
    }
  });

  /**
   * Show task list (return from filters)
   */
  bot.action("show_task_list", async (ctx) => {
    try {
      const tasks = dbService.getAllTasks();
      const filteredTasks = tasks.filter(
        (task) => task.status !== TASK_STATUS.DONE
      );

      const text =
        createTaskListHeader() + "\n\n" + formatTaskList(tasks, false);

      await ctx.editMessageText(text, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState(filteredTasks, SCREEN_STATE.MAIN_LIST),
      });

      await safeAnswerCbQuery(ctx, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á:", error);
      await safeAnswerCbQuery(ctx, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    }
  });

  /**
   * Show status screen
   */
  bot.action("show_statuses_screen", async (ctx) => {
    try {
      const tasks = dbService.getAllTasks();

      const notStarted = tasks.filter(
        (task) => task.status === TASK_STATUS.NOT_STARTED
      ).length;
      const inProgress = tasks.filter(
        (task) => task.status === TASK_STATUS.IN_PROGRESS
      ).length;
      const done = tasks.filter(
        (task) => task.status === TASK_STATUS.DONE
      ).length;

      const text =
        `üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã\n\n` +
        `${TASK_STATUS_EMOJI.NOT_STARTED} –ù–µ –Ω–∞—á–∞—Ç–æ: ${notStarted}\n` +
        `${TASK_STATUS_EMOJI.IN_PROGRESS} –í —Ä–∞–±–æ—Ç–µ: ${inProgress}\n` +
        `${TASK_STATUS_EMOJI.DONE} –°–¥–µ–ª–∞–Ω–æ: ${done}\n\n` +
        `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`;

      await ctx.editMessageText(text, {
        parse_mode: "HTML",
        ...createStatusButtonsKeyboard(),
      });

      await safeAnswerCbQuery(ctx, "–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:", error);
      await safeAnswerCbQuery(ctx, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    }
  });
}
