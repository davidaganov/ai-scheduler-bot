import { Context, Telegraf } from "telegraf";
import { Message, Update } from "telegraf/typings/core/types/typegram";
import dbService from "../services/database";
import { openaiService, sessionService } from "../services";
import {
  formatTask,
  createTaskActionsKeyboard,
  createTasksConfirmationKeyboard,
  createProjectManagementKeyboard,
} from "../utils";
import { type Task, TASK_STATUS } from "../types";

/**
 * Sets up message handlers for the bot
 * @param bot - Telegraf bot instance
 */
export function setupMessageHandlers(bot: Telegraf<Context<Update>>) {
  // Subscribe to accumulated messages processing event
  sessionService.on("process_messages", async (chatId) => {
    await processAccumulatedMessages(chatId, bot);
  });

  bot.on("message", async (ctx) => {
    const message = ctx.message as
      | Message.TextMessage
      | Message.CaptionableMessage;
    const chatId = ctx.chat.id;

    // Check user state
    const userState = sessionService.getUserState(chatId);

    // If user is waiting for project name input
    if (userState === "waiting_for_project_name") {
      await handleNewProjectName(ctx, bot);
      return;
    }

    // Check if this is a forwarded message
    if (!("forward_from" in message || "forward_sender_name" in message)) {
      return ctx.reply(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."
      );
    }

    // Extract text from message (from text or caption)
    const text =
      "text" in message
        ? message.text
        : "caption" in message
        ? message.caption
        : "";

    if (!text?.trim()) {
      return ctx.reply("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.");
    }

    // Add message to accumulation buffer
    sessionService.addMessageToBatch(chatId, text, message);
    sessionService.setUserState(chatId, "accumulating_messages");
  });
}

/**
 * Processes accumulated messages
 * @param chatId - Chat ID
 * @param bot - Telegraf bot instance
 */
async function processAccumulatedMessages(
  chatId: number,
  bot: Telegraf<Context<Update>>
) {
  const accumulatedMessages = sessionService.getAccumulatedMessages(chatId);

  if (!accumulatedMessages || accumulatedMessages.length === 0) {
    console.log("–ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
    return;
  }

  console.log(
    `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${accumulatedMessages.length} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`
  );

  try {
    // Extract message texts
    const messageTexts = accumulatedMessages.map((msg) => msg.text);

    // Group messages into tasks using OpenAI
    const tasks = await openaiService.groupMessagesIntoTasks(messageTexts);

    if (tasks.length === 0) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π");
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á:`, tasks);

    // Save found tasks
    sessionService.setAnalyzedTasks(chatId, tasks);

    // Format message with found tasks
    const tasksText = tasks
      .map((task, index) => `${index + 1}. ${task}`)
      .join("\n\n");

    // Get projects list
    const projects = dbService.getProjects();

    if (projects.length === 0) {
      // If no projects exist, ask to create new one
      sessionService.setUserState(chatId, "waiting_for_project_name");
      await bot.telegram.sendMessage(
        chatId,
        `üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}\n\n${tasksText}\n\nüÜï –≠—Ç–æ –≤–∞—à–∏ –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞—á–∏! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:`
      );
    } else {
      // Show project selection
      await bot.telegram.sendMessage(
        chatId,
        `üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}\n\n${tasksText}\n\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á:`,
        createTasksConfirmationKeyboard(projects)
      );
    }
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);

    await bot.telegram.sendMessage(
      chatId,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );

    // Clear user data
    sessionService.clearUserData(chatId);
  }
}

/**
 * Handles new project name input for multiple tasks or project management
 * @param ctx - Telegraf context
 * @param bot - Telegraf bot instance
 */
async function handleNewProjectName(
  ctx: Context,
  bot: Telegraf<Context<Update>>
) {
  if (!ctx.chat) return;

  const chatId = ctx.chat.id;
  const message = ctx.message as Message.TextMessage;

  if (!("text" in message) || !message.text?.trim()) {
    return ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.");
  }

  const projectName = message.text
    .trim()
    .replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s]/g, "") // Allow spaces and preserve case
    .replace(/\s+/g, " "); // Replace multiple spaces with single spaces

  if (projectName.length < 2) {
    return ctx.reply(
      "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
    );
  }

  // Check if there are analyzed tasks (task creation mode)
  const analyzedTasks = sessionService.getAnalyzedTasks(chatId);

  if (analyzedTasks && analyzedTasks.length > 0) {
    // Task creation mode
    try {
      // Create all tasks with new project
      await createMultipleTasks(ctx, analyzedTasks, projectName, bot);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
      sessionService.clearUserData(chatId);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
    }
  } else {
    // Project management mode - just create project
    try {
      if (dbService.addProject(projectName)) {
        await ctx.reply(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω!`);

        // Show updated projects list
        const projects = dbService.getProjects();
        let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";

        projects.forEach((project) => {
          const stats = dbService.getProjectStats(project);
          projectsInfo += `üìÇ <b>${project}</b>\n`;
          projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
        });

        await ctx.reply(projectsInfo, {
          parse_mode: "HTML",
          ...createProjectManagementKeyboard(projects),
        });
      } else {
        await ctx.reply(
          `‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç "${projectName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`
        );
        return; // Don't clear state so user can enter another name
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
    }
  }

  // Clear user state
  sessionService.clearUserState(chatId);
}

/**
 * Creates multiple tasks from analyzed messages
 * @param ctx - Telegraf context
 * @param tasks - Array of task descriptions
 * @param project - Project name
 * @param bot - Telegraf bot instance
 */
export async function createMultipleTasks(
  ctx: Context,
  tasks: string[],
  project: string,
  bot: Telegraf<Context<Update>>
) {
  if (!ctx.chat) return;

  const chatId = ctx.chat.id;
  const createdTasks: Task[] = [];

  try {
    // Create each task
    for (const taskDescription of tasks) {
      const task = {
        description: taskDescription,
        project,
        status: TASK_STATUS.NOT_STARTED,
        created_at: new Date().toISOString(),
      };

      const taskId = dbService.addTask(task);
      createdTasks.push({ ...task, id: taskId });
    }

    // Send confirmation message
    await ctx.reply(
      `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdTasks.length} –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project}"!`
    );

    // Send each task as separate message with action buttons
    for (const task of createdTasks) {
      await bot.telegram.sendMessage(chatId, formatTask(task), {
        parse_mode: "HTML",
        link_preview_options: { is_disabled: true },
        ...createTaskActionsKeyboard(task.id!, task.status),
      });
    }

    // Clear user data
    sessionService.clearUserData(chatId);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
    throw error;
  }
}
