import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../../services/database";
import {
  getKeyboardByScreenState,
  formatTaskList,
  createTaskListHeader,
} from "../../utils";
import { SCREEN_STATE, TASK_STATUS } from "../../types";
import { safeAnswerCbQuery } from "./utils";

/**
 * Sets callback handlers for navigation through the bot sections
 * @param bot - Telegraf bot instance
 */
export function setupNavigationCallbacks(bot: Telegraf<Context<Update>>) {
  /**
   * Main menu with a list of tasks
   */
  bot.action("show_main_menu", async (ctx) => {
    try {
      console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`);

      const tasks = dbService.getAllTasks();
      const filteredTasks = tasks.filter(
        (task) => task.status !== TASK_STATUS.DONE
      );

      // If there are no tasks, show an empty list
      if (tasks.length === 0) {
        await ctx.editMessageText(
          "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
          getKeyboardByScreenState([], SCREEN_STATE.MAIN_LIST)
        );
        await safeAnswerCbQuery(ctx);
        return;
      }

      const taskListText =
        createTaskListHeader() + "\n\n" + formatTaskList(tasks, false);

      await ctx.editMessageText(taskListText, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState(filteredTasks, SCREEN_STATE.MAIN_LIST),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:", error);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á");
    }
  });

  /**
   * Project management section
   */
  bot.action("show_projects", async (ctx) => {
    try {
      console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–µ–∫—Ç–æ–≤`);

      const projects = dbService.getProjects();

      if (projects.length === 0) {
        await ctx.editMessageText(
          "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:",
          getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          })
        );

        await safeAnswerCbQuery(ctx, "–ü—Ä–æ–µ–∫—Ç—ã");
        return;
      }

      let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";

      projects.forEach((project) => {
        const stats = dbService.getProjectStats(project);
        projectsInfo += `üìÇ <b>${project}</b>\n`;
        projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
      });

      await ctx.editMessageText(projectsInfo, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
          projects,
        }),
      });

      await safeAnswerCbQuery(ctx, "–ü—Ä–æ–µ–∫—Ç—ã");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–æ–≤");
    }
  });

  /**
   * Information about the bot
   */
  bot.action("show_help", async (ctx) => {
    try {
      console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å–ø—Ä–∞–≤–∫—É`);

      const helpText = `
<b>üì± AI Scheduler Bot</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
‚Ä¢ /projects - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏

<b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –±–æ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç –∏—Ö –≤ –∑–∞–¥–∞—á–∏

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—é
‚Ä¢ –ú–µ–Ω—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å (–Ω–µ –Ω–∞—á–∞—Ç–æ, –≤ —Ä–∞–±–æ—Ç–µ, —Å–¥–µ–ª–∞–Ω–æ)
‚Ä¢ –£–¥–∞–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏

<b>–ü—Ä–æ–µ–∫—Ç—ã:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∞–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞

<b>–í–µ—Ä—Å–∏—è:</b> 1.0.0
`;

      await ctx.editMessageText(helpText, {
        parse_mode: "HTML",
        link_preview_options: { is_disabled: true },
        ...getKeyboardByScreenState([], SCREEN_STATE.MAIN_LIST),
      });

      await safeAnswerCbQuery(ctx, "–°–ø—Ä–∞–≤–∫–∞");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏:", error);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏");
    }
  });
}
