import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../../services/database";
import { sessionService } from "../../services";
import {
  createProjectActionsKeyboard,
  createProjectConfirmationKeyboard,
  getKeyboardByScreenState,
  formatTaskList,
  createTaskListHeader,
} from "../../utils";
import { SCREEN_STATE, TASK_STATUS } from "../../types";
import { onNextTextMessage } from "../../services/session";
import { safeAnswerCbQuery } from "./utils";

/**
 * Sets callback handlers for working with projects
 * @param bot - Telegraf bot instance
 */
export function setupProjectCallbacks(bot: Telegraf<Context<Update>>) {
  /**
   * Project management
   */
  bot.action(/^manage_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];
    const stats = dbService.getProjectStats(project);

    try {
      console.log(
        `–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º "${project}"`
      );

      const projectInfo =
        `üìÅ –ü—Ä–æ–µ–∫—Ç: <b>${project}</b>\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
        `   ‚Ä¢ ‚è≥ –ù–µ –Ω–∞—á–∞—Ç–æ: ${stats.notStarted}\n` +
        `   ‚Ä¢ üöß –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgress}\n` +
        `   ‚Ä¢ ‚úÖ –°–¥–µ–ª–∞–Ω–æ: ${stats.done}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(projectInfo, {
        parse_mode: "HTML",
        ...createProjectActionsKeyboard(project),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–º:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Adding a new project
   */
  bot.action("add_new_project", async (ctx) => {
    if (!ctx.chat) return;

    const chatId = ctx.chat.id;

    try {
      console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞`);

      // Set the state of waiting for the project name
      sessionService.setUserState(chatId, "waiting_for_project_name");

      await ctx.editMessageText(
        "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"
      );

      await safeAnswerCbQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Clearing the project
   */
  bot.action(/^clear_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const confirmMessage =
        `üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"\n\n` +
        `‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ!\n` +
        `–ü—Ä–æ–µ–∫—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –Ω–æ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã?`;

      await ctx.editMessageText(confirmMessage, {
        parse_mode: "HTML",
        ...createProjectConfirmationKeyboard("clear", project),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Deleting the project
   */
  bot.action(/^delete_project:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const confirmMessage = `üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${project}"?\n\n–í—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞.`;

      await ctx.editMessageText(confirmMessage, {
        parse_mode: "HTML",
        ...createProjectConfirmationKeyboard("delete", project),
      });

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    }
  });

  /**
   * Confirmation of project clearing
   */
  bot.action(/^confirm_project_clear:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const clearedCount = dbService.clearProject(project);

      await ctx.editMessageText(
        `‚úÖ –ü—Ä–æ–µ–∫—Ç "${project}" –æ—á–∏—â–µ–Ω.\n` + `–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${clearedCount}`
      );

      await safeAnswerCbQuery(ctx, "–ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
    }
  });

  /**
   * Confirmation of project deletion
   */
  bot.action(/^confirm_project_delete:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const success = dbService.deleteProject(project);

      if (success) {
        const projects = dbService.getProjects();

        let text;
        if (projects.length === 0) {
          text =
            "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:";
        } else {
          let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";
          projects.forEach((project) => {
            const stats = dbService.getProjectStats(project);
            projectsInfo += `üìÇ <b>${project}</b>\n`;
            projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
          });
          text = projectsInfo;
        }

        await ctx.editMessageText(text, {
          parse_mode: "HTML",
          ...getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          }),
        });

        await safeAnswerCbQuery(ctx, `–ü—Ä–æ–µ–∫—Ç "${project}" —É–¥–∞–ª–µ–Ω`);
      } else {
        await ctx.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${project}"`);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞");
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Cancellation of project clearing
   */
  bot.action(/^cancel_project_clear:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const stats = dbService.getProjectStats(project);
      const projectInfo =
        `üìÅ –ü—Ä–æ–µ–∫—Ç: <b>${project}</b>\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
        `   ‚Ä¢ ‚è≥ –ù–µ –Ω–∞—á–∞—Ç–æ: ${stats.notStarted}\n` +
        `   ‚Ä¢ üöß –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgress}\n` +
        `   ‚Ä¢ ‚úÖ –°–¥–µ–ª–∞–Ω–æ: ${stats.done}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(projectInfo, {
        parse_mode: "HTML",
        ...createProjectActionsKeyboard(project),
      });

      await safeAnswerCbQuery(ctx, "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—á–∏—Å—Ç–∫–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞");
    }
  });

  /**
   * Cancellation of project deletion
   */
  bot.action(/^cancel_project_delete:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const stats = dbService.getProjectStats(project);
      const projectInfo =
        `üìÅ –ü—Ä–æ–µ–∫—Ç: <b>${project}</b>\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
        `   ‚Ä¢ ‚è≥ –ù–µ –Ω–∞—á–∞—Ç–æ: ${stats.notStarted}\n` +
        `   ‚Ä¢ üöß –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgress}\n` +
        `   ‚Ä¢ ‚úÖ –°–¥–µ–ª–∞–Ω–æ: ${stats.done}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(projectInfo, {
        parse_mode: "HTML",
        ...createProjectActionsKeyboard(project),
      });

      await safeAnswerCbQuery(ctx, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞");
    }
  });

  /**
   * Return to the list of projects
   */
  bot.action("back_to_projects", async (ctx) => {
    try {
      console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤`);

      const projects = dbService.getProjects();

      if (projects.length === 0) {
        await ctx.editMessageText(
          "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:",
          getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          })
        );
      } else {
        let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";

        projects.forEach((project) => {
          const stats = dbService.getProjectStats(project);
          projectsInfo += `üìÇ <b>${project}</b>\n`;
          projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
        });

        await ctx.editMessageText(projectsInfo, {
          parse_mode: "HTML",
          ...getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          }),
        });
      }

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  });

  /**
   * Create a new project
   */
  bot.action("create_project", async (ctx) => {
    try {
      console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞`);

      await ctx.editMessageText(
        `üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:`,
        getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT)
      );
      await safeAnswerCbQuery(ctx);

      // Register a one-time event handler for the next text message
      const userId = ctx.from?.id;
      if (userId) {
        onNextTextMessage(userId, async (context: Context, text: string) => {
          try {
            const projectName = text.trim();
            console.log(
              `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –ø—Ä–æ–µ–∫—Ç "${projectName}"`
            );

            if (projectName.length === 0) {
              await context.reply(
                "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
              );
              return;
            }

            // Check if the project already exists
            const projects = dbService.getProjects();
            if (projects.includes(projectName)) {
              await context.reply(
                `‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç "${projectName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`
              );
              return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º addProject –≤–º–µ—Å—Ç–æ createProject
            dbService.addProject(projectName);

            await context.reply(
              `‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∏—Ö –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞`,
              {
                parse_mode: "HTML",
                ...getKeyboardByScreenState([], SCREEN_STATE.MAIN_LIST),
              }
            );
          } catch (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
            await context.reply(
              "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            );
          }
        });
      }
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞");
    }
  });

  /**
   * Show tasks for a project
   */
  bot.action(/^project_tasks:(.+)$/, async (ctx) => {
    const project = ctx.match[1];

    try {
      console.log(
        `–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`
      );

      const tasks = dbService.getTasksByFilter({ project });
      const activeTasks = tasks.filter(
        (task) => task.status !== TASK_STATUS.DONE
      );

      if (tasks.length === 0) {
        await ctx.editMessageText(
          `üìÅ –ü—Ä–æ–µ–∫—Ç "${project}"\n\n–í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.`,
          getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT)
        );
        await safeAnswerCbQuery(ctx, "–ü—Ä–æ–µ–∫—Ç –ø—É—Å—Ç");
        return;
      }

      const header = createTaskListHeader({ project });
      const taskListText = header + "\n\n" + formatTaskList(tasks, false);

      await ctx.editMessageText(taskListText, {
        parse_mode: "HTML",
        ...getKeyboardByScreenState(
          activeTasks,
          SCREEN_STATE.FILTERED_BY_PROJECT,
          {
            project,
          }
        ),
      });

      await safeAnswerCbQuery(ctx, `–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ "${project}"`);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á");
    }
  });
}
