import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../../services/database";
import {
  formatTask,
  createConfirmationKeyboard,
  getKeyboardByScreenState,
} from "../../utils";
import { TASK_STATUS, TASK_STATUS_TITLE, SCREEN_STATE } from "../../types";
import { safeAnswerCbQuery } from "./utils";

/**
 * Sets callback handlers for working with tasks
 * @param bot - Telegraf bot instance
 */
export function setupTaskCallbacks(bot: Telegraf<Context<Update>>) {
  /**
   * Starting a task (changing the status to "in_progress")
   */
  bot.action(/^start_task:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    if (!ctx.from) return;
    const userId = ctx.from.id;
    const task = dbService.getTaskById(taskId, userId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    if (task.status === TASK_STATUS.IN_PROGRESS) {
      await safeAnswerCbQuery(ctx, "–ó–∞–¥–∞—á–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ");
      return;
    }

    try {
      console.log(`–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –∑–∞–¥–∞—á—É #${taskId} –≤ —Ä–∞–±–æ—Ç—É`);

      if (dbService.updateTaskStatus(taskId, TASK_STATUS.IN_PROGRESS, userId)) {
        task.status = TASK_STATUS.IN_PROGRESS;
        await ctx.editMessageText(formatTask(task), {
          parse_mode: "HTML",
          link_preview_options: { is_disabled: true },
          ...getKeyboardByScreenState([task], SCREEN_STATE.TASK_DETAILS, {
            taskId: task.id,
            status: task.status,
          }),
        });

        await safeAnswerCbQuery(
          ctx,
          `üöß –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ '${TASK_STATUS_TITLE.IN_PROGRESS}'`
        );
      } else {
        await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Completing a task (changing the status to "done")
   */
  bot.action(/^done_task:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    if (!ctx.from) return;
    const userId = ctx.from.id;
    const task = dbService.getTaskById(taskId, userId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    if (task.status === TASK_STATUS.DONE) {
      await safeAnswerCbQuery(ctx, "–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      return;
    }

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É #${taskId} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é`
      );

      if (dbService.updateTaskStatus(taskId, TASK_STATUS.DONE, userId)) {
        task.status = TASK_STATUS.DONE;
        await ctx.editMessageText(formatTask(task), {
          parse_mode: "HTML",
          link_preview_options: { is_disabled: true },
          ...getKeyboardByScreenState([task], SCREEN_STATE.TASK_DETAILS, {
            taskId: task.id,
            status: task.status,
          }),
        });

        await safeAnswerCbQuery(
          ctx,
          `‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ '${TASK_STATUS_TITLE.DONE}'`
        );
      } else {
        await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Request to delete a task
   */
  bot.action(/^delete_task:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    if (!ctx.from) return;
    const userId = ctx.from.id;
    const task = dbService.getTaskById(taskId, userId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    try {
      console.log(`–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId}`);

      await ctx.editMessageText(
        `üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}?\n\n${task.description}`,
        { parse_mode: "HTML", ...createConfirmationKeyboard("delete", taskId) }
      );

      await safeAnswerCbQuery(ctx);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    }
  });

  /**
   * Confirmation of task deletion
   */
  bot.action(/^confirm_delete:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    if (!ctx.from) return;
    const userId = ctx.from.id;

    try {
      console.log(
        `–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId}`
      );

      if (dbService.deleteTask(taskId, userId)) {
        await ctx.editMessageText(`‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);
        await safeAnswerCbQuery(ctx, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞");
      } else {
        await ctx.editMessageText(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}.`);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      }
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
  });

  /**
   * Cancellation of task deletion
   */
  bot.action(/^cancel_delete:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    if (!ctx.from) return;
    const userId = ctx.from.id;
    const task = dbService.getTaskById(taskId, userId);

    if (!task) {
      try {
        await ctx.editMessageText(`‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        await safeAnswerCbQuery(ctx);
      } catch (error: any) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
        await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞");
      }
      return;
    }

    try {
      console.log(`–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId}`);

      await ctx.editMessageText(formatTask(task), {
        parse_mode: "HTML",
        link_preview_options: { is_disabled: true },
        ...getKeyboardByScreenState([task], SCREEN_STATE.TASK_DETAILS, {
          taskId: task.id,
          status: task.status,
        }),
      });

      await safeAnswerCbQuery(ctx, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ");
    }
  });

  /**
   * Information about the task
   */
  bot.action(/^task_info:(\d+)$/, async (ctx) => {
    const taskId = parseInt(ctx.match[1]);
    if (!ctx.from) return;
    const userId = ctx.from.id;
    const task = dbService.getTaskById(taskId, userId);

    if (!task) {
      await safeAnswerCbQuery(ctx, "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    try {
      console.log(
        `–ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ #${taskId}`
      );

      // If there is a current message, edit it
      if (ctx.callbackQuery && ctx.callbackQuery.message) {
        await ctx.editMessageText(formatTask(task), {
          parse_mode: "HTML",
          link_preview_options: { is_disabled: true },
          ...getKeyboardByScreenState([task], SCREEN_STATE.TASK_DETAILS, {
            taskId: task.id,
            status: task.status,
          }),
        });
      } else {
        // If there is no current message, send a new one
        await ctx.reply(formatTask(task), {
          parse_mode: "HTML",
          link_preview_options: { is_disabled: true },
          ...getKeyboardByScreenState([task], SCREEN_STATE.TASK_DETAILS, {
            taskId: task.id,
            status: task.status,
          }),
        });
      }

      await safeAnswerCbQuery(ctx, `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ #${taskId}`);
    } catch (error: any) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:", error.message);
      await safeAnswerCbQuery(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
    }
  });
}
