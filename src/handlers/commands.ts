import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../services/database";
import { getKeyboardByScreenState } from "../utils";
import { TASK_STATUS, TASK_STATUS_EMOJI, SCREEN_STATE } from "../types";

/**
 * Sets up command handlers for the bot
 * @param bot - Telegraf bot instance
 */
export function setupCommandHandlers(bot: Telegraf<Context<Update>>) {
  /**
   * /start command - greeting and instructions
   */
  bot.start((ctx) => {
    ctx.reply(
      "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n" +
        "üìù –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–∏—Ö –∑–∞–¥–∞—á–∏.\n\n" +
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
        "/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n" +
        "/projects - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n" +
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    );
  });

  /**
   * /help command - help information
   */
  bot.help((ctx) => {
    ctx.reply(
      "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
        "/tasks - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n" +
        "/projects - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ \n\n"
    );
  });

  /**
   * /tasks command - show active tasks (without completed ones)
   */
  bot.command("tasks", (ctx) => {
    const tasks = dbService.getAllTasks();

    // Get statistics by statuses
    const notStarted = tasks.filter(
      (task) => task.status === TASK_STATUS.NOT_STARTED
    ).length;
    const inProgress = tasks.filter(
      (task) => task.status === TASK_STATUS.IN_PROGRESS
    ).length;
    const done = tasks.filter(
      (task) => task.status === TASK_STATUS.DONE
    ).length;

    const text =
      `üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã\n\n` +
      `${TASK_STATUS_EMOJI.NOT_STARTED} –ù–µ –Ω–∞—á–∞—Ç–æ: ${notStarted}\n` +
      `${TASK_STATUS_EMOJI.IN_PROGRESS} –í —Ä–∞–±–æ—Ç–µ: ${inProgress}\n` +
      `${TASK_STATUS_EMOJI.DONE} –°–¥–µ–ª–∞–Ω–æ: ${done}\n\n` +
      `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`;

    ctx.reply(text, {
      parse_mode: "HTML",
      ...getKeyboardByScreenState(tasks, SCREEN_STATE.STATUS_SELECTION),
    });
  });

  /**
   * /projects command - project management
   */
  bot.command("projects", (ctx) => {
    const projects = dbService.getProjects();

    if (projects.length === 0) {
      return ctx.reply(
        "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:",
        getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
          projects,
        })
      );
    }

    let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";

    projects.forEach((project: string) => {
      const stats = dbService.getProjectStats(project);
      projectsInfo += `üìÇ <b>${project}</b>\n`;
      projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
    });

    ctx.reply(projectsInfo, {
      parse_mode: "HTML",
      ...getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
        projects,
      }),
    });
  });
}
