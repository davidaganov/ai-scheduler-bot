import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../../services/database";
import {
  formatTaskList,
  createTaskListHeader,
  getKeyboardByScreenState,
} from "../../utils";
import { SCREEN_STATE, TASK_STATUS } from "../../types";

/**
 * Sets the handler for the /list command
 * @param bot - Telegraf bot instance
 */
export function setupListCommand(bot: Telegraf<Context<Update>>) {
  bot.command("list", async (ctx) => {
    try {
      const tasks = dbService.getAllTasks();

      if (tasks.length === 0) {
        await ctx.reply(
          "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
          getKeyboardByScreenState([], SCREEN_STATE.MAIN_LIST)
        );
        return;
      }

      // Filter tasks, excluding completed for the keyboard
      const filteredTasks = tasks.filter(
        (task) => task.status !== TASK_STATUS.DONE
      );

      // Form the text of the task list
      const taskListText =
        createTaskListHeader() + "\n\n" + formatTaskList(tasks, false);

      await ctx.replyWithHTML(
        taskListText,
        getKeyboardByScreenState(filteredTasks, SCREEN_STATE.MAIN_LIST)
      );
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /list:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  });
}
