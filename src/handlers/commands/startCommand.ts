import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../../services/database";
import {
  formatTaskList,
  createTaskListHeader,
  getKeyboardByScreenState,
} from "../../utils";
import { SCREEN_STATE, TASK_STATUS } from "../../types";

/**
 * Sets the handler for the /start command
 * @param bot - Telegraf bot instance
 */
export function setupStartCommand(bot: Telegraf<Context<Update>>) {
  bot.start(async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      const firstName = ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} (${chatId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);

      const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–Ø - <b>AI Scheduler Bot</b>, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ–º.
–ù–∞–ø—Ä–∏–º–µ—Ä: <i>"–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"</i>

–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –∏—Ö –≤ –∑–∞–¥–∞—á–∏.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
‚Ä¢ /projects - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
`;

      // Get the list of tasks for the user (if any)
      const tasks = dbService.getAllTasks();
      const filteredTasks = tasks.filter(
        (task) => task.status !== TASK_STATUS.DONE
      );

      // If there are no tasks, show only the welcome message
      if (tasks.length === 0) {
        await ctx.replyWithHTML(
          welcomeMessage,
          getKeyboardByScreenState([], SCREEN_STATE.MAIN_LIST)
        );
        return;
      }

      // Send the welcome message
      await ctx.replyWithHTML(welcomeMessage);

      // Send the list of existing tasks
      const taskListText =
        createTaskListHeader() + "\n\n" + formatTaskList(tasks, false);

      await ctx.replyWithHTML(
        taskListText,
        getKeyboardByScreenState(filteredTasks, SCREEN_STATE.MAIN_LIST)
      );
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
}
