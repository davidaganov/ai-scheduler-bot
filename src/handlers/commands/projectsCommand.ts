import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram";
import dbService from "../../services/database";
import { getKeyboardByScreenState } from "../../utils";
import { SCREEN_STATE } from "../../types";

/**
 * Sets the handler for the /projects command
 * @param bot - Telegraf bot instance
 */
export function setupProjectsCommand(bot: Telegraf<Context<Update>>) {
  bot.command("projects", async (ctx) => {
    try {
      const projects = dbService.getProjects();

      if (projects.length === 0) {
        await ctx.reply(
          "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:",
          getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
            projects,
          })
        );
        return;
      }

      let projectsInfo = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n";

      projects.forEach((project) => {
        const stats = dbService.getProjectStats(project);
        projectsInfo += `üìÇ <b>${project}</b>\n`;
        projectsInfo += `   üìä –í—Å–µ–≥–æ: ${stats.total} | ‚è≥ ${stats.notStarted} | üöß ${stats.inProgress} | ‚úÖ ${stats.done}\n\n`;
      });

      await ctx.replyWithHTML(
        projectsInfo,
        getKeyboardByScreenState([], SCREEN_STATE.PROJECT_MANAGEMENT, {
          projects,
        })
      );
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /projects:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  });
}
